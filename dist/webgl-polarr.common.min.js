/*!
 * webgl-polarr v0.1.0
 * (c) 2016 huihui <skyalpha@126.com>
 * Released under the MIT License.
 */
!function(r,e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e():"function"==typeof define&&define.amd?define(e):r.GL=e()}(this,function(){"use strict";function r(r,e,t,a){a=a||{};var o=r.createTexture(),n=a.mag_filter||r.LINEAR,i=a.min_filter||r.LINEAR,E=a.wrap_s||r.REPEAT,T=a.wrap_t||r.REPEAT;return r.bindTexture(r.TEXTURE_2D,o),r.pixelStorei(r.UNPACK_FLIP_Y_WEBGL,1),r.texImage2D(r.TEXTURE_2D,0,r.RGBA,r.RGBA,r.UNSIGNED_BYTE,t),r.texParameteri(r.TEXTURE_2D,r.TEXTURE_MAG_FILTER,n),r.texParameteri(r.TEXTURE_2D,r.TEXTURE_MIN_FILTER,i),r.texParameteri(r.TEXTURE_2D,r.TEXTURE_WRAP_S,E),r.texParameteri(r.TEXTURE_2D,r.TEXTURE_WRAP_T,T),i!=r.NEAREST&&i!=r.LINEAR&&r.generateMipmap(r.TEXTURE_2D),r.activeTexture(e),r.bindTexture(r.TEXTURE_2D,o),o}var e=function(r,e,t){function a(e,t){var a=r.createShader(e);if(r.shaderSource(a,t),r.compileShader(a),!r.getShaderParameter(a,r.COMPILE_STATUS))throw new Error("compile error: "+r.getShaderInfoLog(a));return a}if(r.program=r.createProgram(),r.attachShader(r.program,a(r.VERTEX_SHADER,e)),r.attachShader(r.program,a(r.FRAGMENT_SHADER,t)),r.linkProgram(r.program),!r.getProgramParameter(r.program,r.LINK_STATUS))throw new Error("link error: "+r.getProgramInfoLog(r.program));r.useProgram(r.program)},t=function(r,e){var t={},a=e.attributes||[],o=e.uniforms||[];return a.forEach(function(e){t[e]=r.getAttribLocation(r.program,e)}),o.forEach(function(e){t[e]=r.getUniformLocation(r.program,e)}),t},a=function(){var r=[0,0,1,0,0,1,1,1],e=[-1,-1,0,1,-1,0,-1,1,0,1,1,0];return{coords:r,vertices:e,arrVtx:new Float32Array([-1,-1,0,0,1,-1,1,0,-1,1,0,1,1,1,1,1])}},o=function(r,e,t,a){var o=r.createBuffer();return r.bindBuffer(r.ARRAY_BUFFER,o),r.bufferData(r.ARRAY_BUFFER,mesh,r.STATIC_DRAW),r.vertexAttribPointer(e,a,r.FLOAT,!1,0,0),r.enableVertexAttribArray(e),o},n={create:function(r){var e=r.getContext("webgl")||r.getContext("experimental-webgl");if(!e)throw new Error("Failed to get the rendering context for WebGL");return e.viewport(0,0,e.canvas.width,e.canvas.height),e},useProgram:e,getVars:t,getMesh:a,setBuffer:o,loadTexture:r};return n});